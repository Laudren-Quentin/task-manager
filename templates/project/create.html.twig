{# project/create.html.twig #}
{% extends 'base.html.twig' %}

{% block body %}
	<div class="container mt-5">
		<div class="row justify-content-center">
			<div class="col-md-6">
				<h1>Créer un nouveau projet</h1>
				{{ form_start(form, {'attr': {'class': 'mt-4'}}) }}
				{{ form_row(form.title, {'attr': {'class': 'form-control mb-3'}}) }}

				<h3>Participants</h3>
				<ul id="team-members" class="list-group mb-3">{# Existing team members here #}</ul>

				<h3>Ajouter un membre</h3>
				<div id="add-member-input" class="input-group mb-3">
					<input type="email" id="new-member" placeholder="Adresse e-mail" class="form-control">
					<button type="button" class="btn btn-success" id="add-new-member">Ajouter</button>
				</div>


				<input type="hidden" name="participants" id="participants-input" value="">

				<button type="submit" class="btn btn-primary">Créer le projet</button>
				{{ form_end(form) }}

			</div>
		</div>
	</div>

	 <script>
			        const addNewMemberBtn = document.getElementById('add-new-member');
			        const newMemberInput = document.getElementById('new-member');
			        const teamMembersContainer = document.getElementById('team-members');
			        const participantsInput = document.getElementById('participants-input');
			        
			        const existingParticipants = [];
			
			        function createTeamMember(email) {
			            const newMemberField = document.createElement('li');
			            newMemberField.classList.add('team-member', 'list-group-item', 'd-flex', 'justify-content-between', 'aligns-items-center');
			            newMemberField.textContent = email;
			            
			            const removeButton = document.createElement('button');
			            removeButton.type = 'button';
			            removeButton.classList.add('remove-member-btn', 'btn', 'btn-danger');
			            removeButton.textContent = 'X';
			            removeButton.dataset.email = email;
			            
			            removeButton.addEventListener('click', () => {
			                // Remove the email from the existingParticipants array
			                const index = existingParticipants.indexOf(email);
			                if (index !== -1) {
			                    existingParticipants.splice(index, 1);
			                }
			                
			                // Update the hidden input value
			                participantsInput.value = existingParticipants.join(',');
			                
			                // Remove the team member element from the container
			                newMemberField.remove();
			            });
			            
			            newMemberField.appendChild(removeButton);
			            teamMembersContainer.appendChild(newMemberField);
			        }
			
			        addNewMemberBtn.addEventListener('click', () => {
			            const email = newMemberInput.value;
			
			            // Check if email is already in the existingParticipants array
			            if (existingParticipants.includes(email)) {
			                alert('L\'utilisateur est déjà dans la liste des participants.');
			                return;
			            }
			
			            // Send AJAX request to check if the user exists
			            fetch('{{ path('app_check_user') }}?email=' + email)
			                .then(response => response.json())
			                .then(data => {
			                    if (data.exists) {
			                        // Add email to existingParticipants list
			                        existingParticipants.push(email);
			
			                        // Update the hidden input value
			                        participantsInput.value = existingParticipants.join(',');
			
			                        // Create a new div for the team member with remove button
			                        createTeamMember(email);
			
			                        // Clear the input
			                        newMemberInput.value = '';
			                    } else {
			                        // Display an error message or handle the case when the user doesn't exist
			                        alert('L\'utilisateur n\'existe pas');
			                    }
			                })
			                .catch(error => {
			                    // Handle errors from the AJAX request
			                    console.error('Error:', error);
			                });
			        });
			    </script>
{% endblock %}
