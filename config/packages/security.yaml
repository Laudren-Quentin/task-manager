security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        # Use native password hasher, which auto-selects and migrates the best
        # possible hashing algorithm (which currently is "bcrypt")
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            # provider that you set earlier inside providers
            provider: app_user_provider
            custom_authenticator: App\Security\LoginFormAuthenticator
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true
    
    role_hierarchy:
        ROLE_ADMIN:       ROLE_USER
        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            # Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            #     algorithm: auto
            #     cost: 4 # Lowest possible value for bcrypt
            #     time_cost: 3 # Lowest possible value for argon
            #     memory_cost: 10 # Lowest possible value for argon
            # Use native password hasher, which auto-selects and migrates the best
            # possible hashing algorithm (which currently is "bcrypt")
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'

        providers:
            users:
                entity:
                    # the class of the entity that represents users
                    class: 'App\Entity\User'
                    # the property to query by - e.g. email, username, etc
                    property: 'email'

                    # optional: if you're using multiple Doctrine entity
                    # managers, this option defines which one to use
                    #manager_name: 'customer'

        firewalls:
            dev:
                lazy: true
                provider: database_users # Use the database provider
                form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login
                
            main:
                lazy: true
                provider: database_users # Use the database provider
                form_login:
                # "app_login" is the name of the route created previously
                login_path: app_login
                check_path: app_login

    access_control:
        # require ROLE_ADMIN for /admin*
        - { path: '^/admin', roles: ROLE_ADMIN }

        # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
        - { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

        # the 'path' value can be any valid regular expression
        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
        - { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }
